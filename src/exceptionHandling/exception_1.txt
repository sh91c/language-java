[예외처리]
- 프로그램 오류 종류
 - 컴파일 에러(compile-time error): 컴파할 때 발생하는 에러
   ㄴ 컴파일러: 구문체크, 번역, 최적화, 생략된 코드 추가
 - 런타임 에러(runtime error): 실행할 때 발생하는 에러 -> 프로그램 종료
 - 논리적 에러(logical error): 작성 의도와 다르게 동작할 때
    -> 프로그램이 종료되지 않고 의도와 다른 결과가 나옴

[Java의 런타임 에러; 실행중에 발생할 수 있는 에러]
- 에러(error): 프로그램 코드에 의해서 수습될 수 없는 심각한 오류
- 예외(exception): 프로그램 코드에 의해서 수습될 수 있는 다소 미약한 오류

[예외처리의 정의와 목적]
- 정의: 프로그램 실행 시 발생할 수 있는 예외의 발생에 대비한 코드를 작성하는 것
- 목적: 프로그램의 비정상 종료를 막고, 정상적인 실행상태를 유지하는 것

[예외 클래스의 계층 구조] 참고만..
Object - Throwable - [Exception] - IOException
                                 - ClassNotFoundException
                                 - ...
                                 - [RuntimeException]   - ArithmeticException
                                                        - ClassCastException
                                                        - NullPointerException
                                                        - ...
                                                        - IndexOutOfBoundsException
                   - Error       - ...
                                 - OutOfMemoryError

[Exception 과 RuntimeException]
1. Exception 클래스들: 사용자의 실수와 같은 외적인 요인에 의해 발생하는 예외
2. RuntimeException 클래스들: 프로그래머의 실수로 발생하는 예외

[try ~ catch]
try {
    // 예외가 발생할 가능성이 있는 코드 작성
} catch (Exception1 e1) {
    // Exception1 의 경우가 발생시, 이를 처리
} catch (Exception2 e2) {
    // Exception2 의 경우가 발생시, 이를 처리
} catch (ExceptionN eN) {
    // ExceptionN 의 경우가 발생시, 이를 처리
}

[printStackTrace() 와 getMessage()]

===================================================================

[멀티 catch 블럭]
1.
try {
    ...
} catch (ExceptionA ea) {
    ea.printStackTrace();
} catch (ExceptionB eb) {
    eb.printStackTrace();   // 위와 코드 중복이 발생할 때 아래 처럼 합칠 수 있다.
}
->
2.
try {
    ...
} catch (ExceptionA | ExceptionB e) { // 주의: (부모 예외 | 자식 예외)는 의미상 (부모 예외)와
                                      // 같으니까 주의할 것.
    e.printStackTrace();
}

3.
try {
    ...
} catch (ExceptionA | ExceptionB e) {
    e.method();     // 에러! ExceptionA 타입의 e인지, ExceptionB 타입의 e인지 알 수 없다.
    그래서 조건문을 통해 instanceof 비교 후 해당 참조변수를 통해 method() 실행
    if (e instanceof ExceptionA) {
        ExceptionA ea = (ExceptionA) e;
        ea.method();
    } else if (e instanceof ExceptionB) {
        ExceptionB eb = (ExceptionB) e;
        eb.method();
    }
}

[예외 발생시키기]
1. 연산자 new 를 통해 발생시키려는 예외 클래스의 객체를 만든 다음
    Exception e = new Exception("고의적인 예외 발생!");
2. 키워드 throw 를 사용해서 예외를 발생시킨다.
    throw e;

class Ex {
    psvm {
        try {
            Exception e = new Exception("고의적인 예외 발생");
            throw e;
        } catch (Exception e) {
            sout("에러메세지: " + e.message());
            e.printStackTrace();
        }
    }
}

[checked 예외, unchecked 예외]
- checked: 컴파일러가 예외 처리 여부를 체크(예외 처리를 필수적으로 해야함)
    - Exception 및 그 예외 자손들은 예외 처리 필수
    - 컴파일러 쳌
    - try~catch 필수
- unchecked: 컴파일러가 예외 처리 여부를 체크하지 않음(예외 처리를 선택적으로 함)
    - RuntimeException 및 런타임 예외 자손
    - try~catch 선택

[메서드에 예외 선언하기]
- 예외를 처리하는 방법: try~catch 문, 예외 선언하기(예외 떠넘기기, 알리기), 은폐
ㄴ 메서드에 예외 선언하기
    - 메서드가 호출시 발생가능한 예외를 호출하는 쪽으로 알리는 것
    * 예외를 발생시키는 키워드 throw와 예외를 메서드에 선언할 때 쓰이는 throws를 잘 구별하자
void method() throws Exception1, Exception2, .. ExceptionN {
    // 메서드를 선언할 때 발생할 수 있는 예외를 알려줌
    // 메서드 내용
}

// method)에서 Exception과 그 자손 예외 발생 가능
void method() throws Exception {
    // 모든 종류의 예외가 발생 가능
    // 메서드 내용
}

*** 메서드의 throws 예외는 checked 예외만 작성한다. ***

ex)
static void startInstall() throws SpaceException, MemoryException {
    if(!enoughSpace())
        throw new SpaceException("설치할 공간이 부족합니다.");
    if(!enoughMemory())
        throw new MemoryException("메모리가 부족합니다.");
}

[try~catch~finally]
- finally 블럭은 예외 발생 여부와 상관없이 수행되어야 하는 코드를 작성.

==============================================================

[사용자 정의 예외 만들기]
- 직접 예외 클래스를 정의할 수 있다.
- 조상은 Exception과 RuntimeException중에서 선택.
class CustomException extends Exception {
    CustomException(String msg) {
        super(msg); // 조상인 Exception 클래스의 생성자를 호출한다.
    }
}

[예외 되던지기]
- 예외를 처리한 후에 다시 예외를 발생시키는 것.
- 호출한 메서드와 호출된 메서드 양쪽 모두에서 예외처리하는 것.
psvm {
    try {
        method1();
    } catch (Exception e) {
        sout("main 메서드에서 예외가 처리 되었습니다.");
    }
}

static void method1() throws Exception {
    try{
        throw new Exception();
    } catch (Exception e) {
        sout("method1 메서드에서 예외가 처리되었습니다.");
        throw e;
    }
}

결과: method1 메서드에서 예외가 처리되었습니다.
     main 메서드에서 예외가 처리되었습니다.

===============================================================

[연결된 예외: chained exception]
- 한 예외가 다른 예외를 발생시킬 수 있다.
- 예외 A가 예외 B를 발생시키면, A는 B의 원인 예외(cause exception)이라고 한다.

Throwable initCause(Throwable cause) 지정한 예외를 원인 예외로 등록
Throwable getCause()                 원인 예외를 반환

* Throwable 은 Exception과 Error의 조상

ex) 예외 안에 또 다른 예외가 포함된 것을 연결된 예외라고 함.
public class Throwable implements Serializable {
    ...
    private Throwable cause = this; // 객체 자신(this)을 원인 예외로 등록.
    // cause: 원인 예외를 저장하기 위한 iv
    ...
    public syncronized Throwable initCause(Throwable cause) {
        ...
        this.cause = cause;
        return this;
    }
    ...
}

*** 연결된 예외는 다시 복습하기 ***