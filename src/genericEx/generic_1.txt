[제네릭]
- 제네릭 용어
Box<T>: 'T Box'라고 읽거나 'T의 Box' 라고 읽음
    T: Type 변수, Type 매개변수 등으로 읽음
    (번외) E도 있음(Element). 둘의 차이는 없으나 배열의 요소처럼 생각한다면 E를 작성. 그렇지 않다면 T로 작성하는 듯함.
    Box: 원시 타입

    - 제네릭 클래스 선언은 아래와 같다.
    class Box<T> {};
    - 참조변수와 생성자에는 같은 타입으로 선언되어야한다.
    Box<String> box = new Box<String>();        // 제네릭 <타입> 호출
    - 제네릭은 생성할 때마다 다른 <타입>을 선언해줄 수 있다. 마치 메서드가 호출할 때마다 다른 값을 반환하듯이..
        - <Type> 에서 보통 Type 의 뜻은 parameterized type, 즉 매개변수화 된 타입의 뜻을 가진다.

[제네릭: 타입의 다형성]
- 클래스의 다형성처럼 <Type>으로 다형성이 되진 않지만 (참조변수와 생성자의 타입이 일치해야한다는 점)
    아래와 같이
    List<Tv> list1 = new ArrayList<Tv>();     // ArrayList 가 list1 을 구현
    List<Tv> list2 = new LinkedList<Tv>();    // LinkedList 가 list2 를 구현
    다형성을 구현할 수 있다. 여전히 <Type>은 일치해야한다는 점이다.

[제네릭: 매개변수의 다형성]
- 예를 들어 Product 클래스가 있고 이를 상속받은 Tv, Audio 가 있다고 가정하자
    ArrayList<Product> productList = new ArrayList<Product>();
    list.add(new Tv());     // 가능
    list.add(new Audio());  // 가능
    위와 같이 매개변수의 다형성이 가능하다.

    - 하지만 값을 꺼내올 때
    productList 의 요소들은 모두 product 타입으로 지정된 요소라고 선언되었기 때문에
    Tv 또는 Audio 타입을 가진 요소들은 값을 꺼내 변수에 대입할 때 형변환을 거쳐야한다.
    아래의 예시를 확인
    Tv tv1 = productList.get(0);                // X 형변환 필요
    Tv tv2 = (Tv) productList.get(0);           // 가능
    Audio audio1 = productList.get(1);          // X 형변환 필요
    Audio audio2 = (Audio) productList.get(1);  // 가능

