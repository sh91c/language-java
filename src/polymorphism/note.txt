다형성:
    '조상타입의 참조변수' 로 '자식타입의 객체' 를 다루는 것

class Tv {
    boolean power;
    int channel;

    void power() { power = !power; }
    void channelUp() { channel++; }
    void channelDown() { channel-- }
}

class SmartTv extends Tv {
    String text;
    void Caption() { ... }
}

public class 임시클래스 {
    public static void main(String[] args) {
        -> 앞서서 배울 때 참조 변수와 객체 생성 타입이 같았다면,,
        Tv t = new Tv();    // 타입 일치
        SmartTv s = new SmartTv();  // 타입일치

        -> 다형성의 '조상의 참조변수 타입' 과 '자손의 인스턴스 타입' 은 서로 불일치하다는 것이다.
        Tv t2 = new SmartTv();  // Tv와 SmartTv 타입 불일치,, 하지만 가능,, 에러 X
        -> 상속을 받은 부모-자식관계에서만 가능하다.

        -> 타입의 일치와 불일치의 차이점:
            * 인스턴스를 중점으로 생각하자.
            SmartTv s = new SmartTv(); // 일치: 7개의 멤버를 모두 사용가능하다.
            Tv t = new SmartTv(); // 불일치: 인스턴스에는 7개의 멤버를 가지지만
                                         참조변수의 조상타입에 따라 5개의 멤버 일부만 사용가능하다.

            (반대의 경우)
            * 자손 타입의 참조변수로는 조상타입의 인스턴스 객체를 생성할 수 없다.
            -> 근거: 가지고 있지 않는 멤버를 호출하면 에러가 발생하기 때문.
            Tv t = new SmartTv(); // 가능.
            SmartTv s = new Tv(); // 불가능. 에러.

        Q1. 참조변수의 타입은 인스턴스 타입과 반드시 일치해야하는가?
        A.  반드시 X. 일치하는 것이 보통이지만 일치하지 않을 수도 있음.

        Q2. 참조변수가 조상타입일 때와 자손타입일 때의 차이?
        A.  참조변수로 사용할 수 있는 멤버의 개수가 달라짐.

        Q3. 자손 타입의 참조변수로 조상 타입의 객체를 가리킬 수 있는가?
        A.  X. 허용되지 않음.

                1.
    }
}

다형성 - 참조변수의 형변환:
    조건 1. 참조변수의 형변환은 사용할 수 있는 멤버의 개수를 조절하는 것 말고는 변하는 것이 없음.(주소값, 객체 등)
            <-> 기본형 데이터타입은 형변환을 거치면 값 자체가 바뀐다.
    조건 2. 부모-자식 관계의 참조변수는 서로 형변환이 가능하다.
            * 형제관계의 참조변수 형변환이라는 것은 없음.

    class Car { }
    class FireEngine extends Car { }
    class Ambulance extends Car { }

    ...

    FireEngine f = new FireEngine();
    Car c = (Car)f;                     // 가능. 조상인 Car 타입으로 형변환(생략가능)
    FireEngine f2 = (FireEngine)c;      // 가능. 자손인 FireEngine 타입으로 형변환(생략불가)
    Ambulance a = (Ambulance)f;         // 불가능. 상속관계가 아닌 클래스간의 형변환 불가

-> 조상 타입의 참조변수에 대한 어떤 장점이 있다는 것일까?
    -> 2가지의 장점이 있다.
