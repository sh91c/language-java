[String 클래스의 생성자와 메서드 (1/5)]
*는 자주 사용하는 메서드를 뜻함

String(String s) : 주어진 문자열 s를 갖는 String 인스턴스 생성.

*String(char[] value): 주어진 문자열 value를 갖는 String 인스턴스를 생성.
    char[] c = {'H', 'e', 'l', 'l', 'o'};
    String s = new String(c);
    -> char[] 배열을 String으로 바꿀때가 있음.
    -> 반대로 String을 char[]로 바꿀때 toCharArray 메서드 사용

String(StringBuffer buf): StringBuffer 인스턴스가 갖고 있는 문자열과 같은
내용의 String 인스턴스 생성.
    StringBuffer sb = new StringBuffer("Hello");
    String s = new String(sb);

char charAt(int index) : 지정된 위치(index)에 있는 문자 1개를 반환.
    index는 0부터 시작.

int compareTo(String str): 문자열(str)을 사전순서로 비교한다.
    int i = "aaa".compareTo("aaa"); -> i = 0
    int i2 = "aaa".compareTo("bbb"); -> i2 = -1
        (a가 b보다 사전순으로 작은 값이다.)
    int i3 = "bbb".compareTo("aaa"); -> i3 = 1

*String concat(String str): 문자열(str)을 뒤에 덧붙인다.
    String s = "Hello";
    String s2 = s.concat(" World"); -> "Hello World"

boolean contains(CharSequence s): 지정된 문자열(s)가 포함되었는지 검사.
    String s = "abcdefg";
    boolean b = s.contains("bc"); -> True

boolean endsWith(String suffix)
boolean startsWith(String suffix?)
    지정된 문자열로 끝/시작하는지 검사.

boolean equals(Object obj)

boolean equalsIgnoreCase(String str): 대소문자 구분없이 비교

int indexOf(int ch): 주어진 문자(ch)가 문자열에 몇번 index 인지 알려준다.
    찾지 못했다면 -1을 반환
int indexOf(int ch, int pos): 주어진 문자가 문자열에 존재하는지 지정된 위치
    (pos; position)부터 확인하여 index를 알려준다. 못찾으면 -1.
    String s = "Hello";
    int idx = s.indexOf('e', 0); -> 1
    int idx1 = s.indexOf('e', 2); -> -1

int length(): 문자열의 길이를 반환
    String s = "Hello";
    int length = s.length(); -> 5

String[] split(String regex): 문자열을 지정된 문자(분리할 기준의 문자)
으로 나누어 문자열 배열에 담아 반환.

String trim(): 문자열의 왼쪽, 오른쪽 끝에 존재하는 공백을 없앤 결과로 반환.

static String valueOf(참조타입 변수명)
    참조타입: boolean, char, int, long, float, double, Object
    지정된 값을 전부 문자열로 변환해서 반환함.
    참조변수의 경우, toString()을 호출한 결과를 반환.

