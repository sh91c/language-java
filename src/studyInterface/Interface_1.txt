[인터페이스]
*결론-핵심:
    1. 추상 메서드의 집합 (프로그래밍 관점)
    2. 구현된 것이 전혀 없는 설계도. 모든 멤버가 public.
    기타. static method, 상수, default method 도 포함되지만 부수적인 것.
    * 프로그래밍 관점에서 추상 메서드의 집합 개념이 제일 중요하다.

*** [추상 클래스와 인터페이스와의 차이점] ***
1. 추상 메서드: 일반 클래스인데 추상 메서드를 가지고 있는 것.
2. 인터페이스: 추상 메서드만 가지고 있는 것. 그 외에는 가질 수 없다.
3. 대략적으로 큰 차이는 생성자나 인스턴스 변수(iv), 인스턴스 메서드를 가질 수 없다는 것이다.

*** [추상 클래스와 인터페이스와의 공통점] ***
1. 추상 메서드를 가진다.

[인터페이스 작성 예문]
interface 인터페이스이름 {
    public static final 타입 상수이름 = 값;    // 상수
                                            // 변수는 가질 수 없다.
    public abstract 메서드이름(매개변수목록);   // 추상 메서드(핵심)
}

[인터페이스를 정의 예문]
interface PlayingCard {
    public static final int SPADE = 4;
    final int DIAMOND = 3;  // public 생략 가능.
    static int HEART = 2;   // final 생략 가능.
    int CLOVER = 1;         // static 생략 가능.
    -> 인터페이스 내 상수는 항상 public 이자 static 이고 final 이다.

    public abstract String getCardNumber();
    String getCardKind();   // public 및 abstract 생략 가능.
    -> 인터페이스의 메서드는 항상 public 이고, abstract 이다.
}

[인터페이스의 상속]
1. 인터페이스의 조상은 인터페이스만 가능하다.
2. Object 가 최고 조상이 아님.
3. 다중상속이 가능. (추상 메서드는 충돌해도 문제가 없다.)

interface Movable {
    /* 지정된 위치 (x, y)로 이동하는 기능의 메서드 */
    void move(int x, int y);
}

interface Attackable {
    /* 지정된 대상(unit)을 공격하는 기능의 메서드 */
    void attack(Unit unit);
}

interface Fightable extends Movable, Attackable { } // 다중상속
-> 클래스가 다중상속이 되지 않는 이유는 메서드 선언부가 충돌되는 것이 문제가 아니라,
   메서드 구현부가 다를 수 있어 충돌이 날 수 있기 때문이다.
   그러므로 인터페이스는 구현부가 없는 추상 메서드들의 집합이므로, 추상 메서드는 구현부가 없기 때문에
   다중상속이 가능하다.
   -> 자바에서는 위의 개념, TMI로 파이썬에서는 mro 매직메서드를 통해 상속하는 클래스의 순서보장을 통해
      클래스 다중상속이 가능함. 그래서 파이썬은 인터페이스 개념이 없고 비슷하게
      추상메서드로 구현할 수 있따~이말이야

-> 아무튼 Fightable 인터페이스에는 Movable, Attackable 를 상속받아 각각 move(), attack()
   2개의 추상 메서드 멤버를 가지게 되었다.

[인터페이스의 구현]
- 인터페이스에 정의된 추상 메서드를 완성하는 것.
class 클래스이름 implements 인터페이스이름 {
    // 인터페이스에 정의된 추상메서드를 모두 구현해야 한다.
}
implements: 구현

(모두 '구현' 하는 경우)
interface Fightable {
    void move(int x, int y);
    void attack(Unit unit);
}

class Fighter implements Fightable {
    public void move(int x, int y) {
        /* 로직 구현 */
    }
    public void attack(Unit unit) {
        /* 로직 구현 */
    }
}
-> Fighter 클래스는 Fightable 인터페이스를 구현했다.

(일부만 '구현' 하는 경우,, attack() 메서드를 구현하지 않음.)
abstract class Fighter implements Fightable {   // 완전한 클래스가 아니기에 abstract 키워드
    public void move(int x, int y) {
        /* 로직 구현 */
    }
}

[정리]
1. 인터페이스란?
-> 추상 메서드의 집합.
2. 인터페이스의 구현이란?
-> 인터페이스의 추상 메서드 구현부를 완성하는 것.

// 추상 클래스의 구현과, 인터페이스의 구현
abstract class Player {
    abstract void play(int pos);
    abstract void stop();
}
class AudioPlayer extends Player {
    void play(int pos) { 생략 }
    void stop() { 생략 }
}

interface Fightable {
    void move(int x, int y);
    void attact(Unit unit);
}
class Fighter implements Fightable {
    public void move(int x, int y) { 생략 }
    public void attack(Unit unit) { 생략 }
}